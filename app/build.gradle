apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// This handles both kotlin and java. Use kapt instead of annotationProcessor
apply plugin: 'kotlin-kapt'

// Update this to update the database on the next build
// This is also used to populate populate MHWDatabase.java configuration
def DATABASE_VERSION = 40

android {
    signingConfigs {
        release {
            storeFile file(GHSStoreFile)
            storePassword GHSStorePW
            keyAlias = GHSKeyAlias
            keyPassword GHSKeyPW
        }
    }
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.gatheringhallstudios.mhworlddatabase"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 21
        versionName "2.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // We set this to false so vectors get rastered at buildtime.
        vectorDrawables.useSupportLibrary = false

        // Export schemas for databases (important for testing)
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // Import exported schemas into tests
        sourceSets {
            androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("int", "DB_VERSION", "${DATABASE_VERSION}")

            // Debug flag usable through R.bool.DEBUG
            resValue "bool", "DEBUG", "false"

            signingConfig signingConfigs.release
        }
        debug {
            buildConfigField("int", "DB_VERSION", "${DATABASE_VERSION}")

            // Debug flag usable through R.bool.DEBUG
            resValue "bool", "DEBUG", "true"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false

        // this application is open source, so we can't force translators to always translate.
        // disable it so we can at least fallback to english without explicit errors.
        disable 'MissingTranslation'
    }
}

androidExtensions {
    // Enables KTX viewbinding to work on viewholders as well
    experimental = true
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    /*
     * Google Support Libraries
     */
    def google_version = "28.0.0"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.0-alpha03'
    implementation 'com.google.android.material:material:1.2.0-alpha06'
    implementation 'androidx.interpolator:interpolator:1.0.0'
    implementation "androidx.constraintlayout:constraintlayout:2.0.0-beta6"
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0"

    /*
     * Testing
     */
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation 'androidx.test:rules:1.3.0-beta01'
    androidTestImplementation "androidx.test.espresso:espresso-core:3.2.0"
    androidTestImplementation "androidx.test.ext:junit:1.1.1"

    /*
     * Flexbox layout
     */
    implementation 'com.google.android:flexbox:1.1.0'

    /*
     * Leak Canary
     * https://github.com/square/leakcanary
     */
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.2'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.2'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.2'

    /*
     * Android Kotlin Extensions
     */
    implementation "androidx.core:core-ktx:1.2.0"

    /*
     * Android Architecture Components
     */
    def architecture_version = "1.1.1"
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    kapt 'androidx.lifecycle:lifecycle-compiler:2.2.0'
    implementation 'androidx.room:room-runtime:2.2.5'
    kapt 'androidx.room:room-compiler:2.2.5'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'androidx.room:room-testing:2.2.5'
    androidTestImplementation 'android.arch.persistence.room:testing:2.2.0'

    /*
     * Android Navigation Component
     */
    def nav_version = "1.0.0"
    implementation "android.arch.navigation:navigation-fragment:$nav_version"
    implementation "android.arch.navigation:navigation-fragment-ktx:$nav_version"
    implementation "android.arch.navigation:navigation-ui:$nav_version"
    implementation "android.arch.navigation:navigation-ui-ktx:$nav_version"

    /*
     * Butterknife
     * https://github.com/JakeWharton/butterknife
     */
    implementation 'com.jakewharton:butterknife:10.0.0'
    kapt 'com.jakewharton:butterknife-compiler:10.0.0'

    /*
     * Adapter Delegates
     * https://github.com/sockeqwe/AdapterDelegates
     */
    implementation 'com.hannesdorfmann:adapterdelegates4:4.0.0'

    /*
     * Groupie
     * https://github.com/lisawray/groupie
     */
    implementation 'com.xwray:groupie:2.3.0'
    implementation 'com.xwray:groupie:2.3.0'
    implementation 'com.xwray:groupie-kotlin-android-extensions:2.3.0'

    /*
     * VectorMaster
     * https://github.com/harjot-oberai/VectorMaster
     */
    implementation 'com.sdsmdg.harjot:vectormaster:1.1.3'

    /*
    Change log extension
     */
    implementation 'com.github.MFlisar:changelog:1.1.2'
    implementation 'androidx.viewpager:viewpager:1.0.0'

    /*
    View pager extension
     */
    implementation 'com.tbuonomo.andrui:viewpagerdotsindicator:4.1.2'
    implementation 'androidx.viewpager2:viewpager2:1.1.0-alpha01'

    implementation 'jp.wasabeef:recyclerview-animators:3.0.0'
}

apply plugin: 'de.undercouch.download'

/**
 * Download the database every time the app is assembled if it hasn't been done already.
 */
gradle.projectsEvaluated {
    preBuild.dependsOn('downloadDatabase')
}

task downloadDatabase(type: Download){
    src "https://github.com/gatheringhallstudios/MHWorldData/releases/download/V${DATABASE_VERSION}/mhw.db"
    dest "src/main/assets/databases/mhw.db"
    overwrite true
    onlyIfNewer true
}
